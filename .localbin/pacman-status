#!/usr/bin/env bash
#
# Check for out-of-date packages.
#
# Usage: pacman-status
#
#   $pacman-status

# This option will make the script exit when there is an error
set -o errexit
# This option will make the script exit when last command threw an error
set -o pipefail
# This option will make the script exit when it tries to use an unset variable
set -o nounset
# Trace what gets executed
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this as it depends on your app

check_dependencies() {
  if ! hash checkupdates >/dev/null 2>&1; then
    echo "%{F#ff5555} error" # missing dependency
    exit 1
  fi
}

num_upgrades() {
  upgrades=$(checkupdates 2>/dev/null | wc -l)
  echo -n ${upgrades}
}

check_dependencies

if [[ $(num_upgrades) -eq 0 ]]; then
  echo "%{F#50fa7b} latest" # up to date
else
  echo "%{F#f1fa8c} upgrade ($(num_upgrades))" # out-of-date packages
fi

exit $?
